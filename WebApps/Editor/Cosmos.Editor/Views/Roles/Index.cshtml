@model List<IdentityRole>
@using Microsoft.AspNetCore.Identity
@{
    var roleIds = (string[])ViewData["RoleIds"];

    ViewData["Title"] = "Role Inventory";

    var protectedRoles = new string[] { "administrators", "editors", "authors", "reviewers", "anonymous" };

    var rowCount = (int)ViewData["RowCount"];
    var sortOrder = (string)ViewData["sortOrder"];
    var currentSort = (string)ViewData["currentSort"];
    var pageNumber = (int)ViewData["pageNo"];
    var pageSize = (int)ViewData["pageSize"];

    var pagerModel = new GridPagerPartialViewModel(pageNumber, rowCount, pageSize, sortOrder, currentSort, "/Roles/Index");
}
<div class="pt-3">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h3 class="text-light">@ViewData["Title"]</h3>
                <hr />
            </div>
        </div>
        @if (Model != null && Model.Any())
        {
            <div class="row bg-dark">
                <div class="col-md-12">
                    <div class="row cpws-table-pager-row-top">
                        <div class="col-md-4">
                            <div class="btn-group" role="group" aria-label="Page Actions">
                                <a class="btn btn-sm btn-secondary" asp-action="Index" asp-controller="Users" title="Manage users.">User List <i class="fa-solid fa-circle-arrow-right"></i></a>
                                <button id="btnDeleteRoles" type="button" class="btn btn-sm btn-secondary" title="Delete the selected role." style="display:none">Delete</button>
                                <button id="btnClearSelection" type="button" onclick="clearSelection()" class="btn btn-sm btn-secondary" title="Clear selected roles." style="display:none">Clear</button>
                            </div>
                        </div>
                        <div class="col-md-4 justify-content-center">
                            <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
                        </div>
                        <div class="col-md-4">
                            <form id="frmNewRole" class="d-flex" asp-action="Create">
                                @Html.AntiForgeryToken()
                                <input name="RoleName" autocomplete="off" placeholder="Enter new role name here." type="text" class="form-control form-control-sm me-2" minlength="2" required>
                                <button id="btnCreate" type="submit" title="Create a new role." class="btn btn-sm btn-primary">Create</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row bg-dark">
            <div class="col-md-12">
                <div class="table-responsive custom-table-responsive">
                    <table class="table custom-table">
                        <thead>
                            <tr>
                                <th scope="col">
                                </th>
                                <th scope="col">
                                    Role Name
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model)
                            {
                                <tr class="row-click-ckbox">
                                    <td style="width:120px;">
                                        @if (protectedRoles.Contains(row.Name.ToLower()) == false)
                                        {
                                            <div class="form-check">
                                                <input class="form-check-input gridCheckBox" data-ccms-id='@row.Id' data-ccms-rolename="@row.Name" type="checkbox">
                                                <label class="form-check-label">
                                                    Select
                                                </label>
                                            </div>
                                        }
                                    </td>
                                    <td>
                                        @row.Name
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row cpws-table-pager-row-bottom">
            <div class="col-md-4"></div>
            <div class="col-md-4 d-flex justify-content-center">
                <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
            </div>
            <div class="col-md-4"></div>
        </div>
    </div>
</div>


<form id="frmDeleteRoleIds" asp-action="Delete" asp-controller="Roles" method="post">
    @Html.AntiForgeryToken()
    <input id="roleIds" name="roleIds" type="hidden" />
</form>

<script>
    var selectedIds;

    let roleIds = [];

    function removeRoleId(roleId) {
        var tmp = roleIds.filter(function (value) {
            return value !== roleId
        });
        roleIds = tmp;
        sessionStorage.setItem("roleIds", JSON.stringify(roleIds));
    }

    function clearRoleIds() {
        roleIds = [];
        sessionStorage.removeItem("roleIds");
    }

    function saveRoleId(roleId) {
        // Avoid duplications
        if (roleIds.indexOf(roleId) == -1) {
            roleIds.push(roleId);
        }
        sessionStorage.setItem("roleIds", JSON.stringify(roleIds));
    }

    function removeRoleId(roleId) {
        var tmp = roleIds.filter(function (value) {
            return value !== roleId
        });
        roleIds = tmp;
        sessionStorage.setItem("roleIds", JSON.stringify(roleIds));
    }

    function getRoleId(checkbox) {
        return $(checkbox).attr("data-ccms-id");
    }

    function clearSelection() {
        $(".gridCheckBox").each(function (index, element) {
            $(element).prop('checked', false);
            cwpsSelectTableRow(element, false);
        });

        clearRoleIds();
        resetButtons()
    }

    function reloadRoleIds() {
        let data = sessionStorage.getItem("roleIds");
        if (typeof (data) === "undefined" || data === null || data === "") {
            roleIds = []
        } else {
            roleIds = JSON.parse(data);
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors,
                function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors,
                            function () {
                                message += this + "\n";
                            });
                    }
                });
            alert(message);
        }
    }

    function onEdit(e) {
        $("#spanChangeNotice").show();
    }

    function onChange(arg) {
        selectedIds = this.selectedKeyNames(); //.join(", ");
        if (selectedIds.length > 0) {
            $("#btnAddToRoles").show();
            $("#btnRemoveFromRoles").show();
            $("#btnDeleteRoles").show();
        } else {
            $("#btnAddToRoles").hide();
            $("#btnRemoveFromRoles").hide();
            $("#btnDeleteRoles").hide();
        }
    }

    function manageUsers(roleId) {
        window.location = "@Url.Action("UsersInRole")/" + roleId;
    }

    function resetButtons() {
        // Get the array length
        let arrayLength = roleIds.length;

        if (arrayLength > 0) {
            $("#btnDeleteRoles").show();
            $("#btnClearSelection").show();
        } else {
            $("#btnDeleteRoles").hide();
            $("#btnClearSelection").hide();
        }
    }

    $(document).ready(function () {

        $("body").addClass("cwps-editor-container");

        reloadRoleIds();

        resetButtons();

        $(".gridCheckBox").each(function (index, element) {

            if ((roleIds.indexOf(getRoleId(element)) > -1)) {
                $(element).prop('checked', true);
                cwpsSelectTableRow(element, true);
            }

            $(element).on("change", function () {

                let roleId = getRoleId(element);

                let isChecked = $(element).prop('checked');

                if (isChecked) {
                    saveRoleId(roleId);
                } else {
                    removeRoleId(roleId);
                }
                cwpsSelectTableRow(element, isChecked);

                resetButtons();

            });
        });

        $(".row-click-ckbox").click(function (e) {
            if (e.target.type != 'checkbox' && e.target.tagName != 'A') {
                var cb = $(this).find("input[type=checkbox]");
                cb.trigger('click');
            }
        });

        $("#frmNewRole").submit(function (e) {
            e.preventDefault();

            var model = $("#frmNewRole").serialize();
            var jqxhr = $.post("@Url.Action("Create")", model, function () {
                window.location = "@Url.Action("Index")";
            }).fail(function (errorMsg) {
                alert(errorMsg.responseText);
            });
        });

        $("#frmDeleteRoleIds").submit(function (e) {

            e.preventDefault();

            var model = { ids: roleIds };

            var jqxhr = $.post("@Url.Action("Delete")", model, function () {
                clearRoleIds();
                window.location = "@Url.Action("Index")";
            }).fail(function (errorMsg) {
                alert(errorMsg.responseText);
            });
        });

        $("#btnDeleteRoles").click(function () {
            $("#frmDeleteRoleIds").submit();
        });
    });

</script>
