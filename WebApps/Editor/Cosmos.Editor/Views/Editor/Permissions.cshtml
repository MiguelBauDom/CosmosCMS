@using Cosmos.Editor.Models;
@using Microsoft.AspNetCore.Identity;
@model List<ArticlePermisionItem>
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _userManager

@{

    var rowCount = (int)ViewData["RowCount"];
    var sortOrder = (string)ViewData["sortOrder"];
    var currentSort = (string)ViewData["currentSort"];
    var pageNumber = (int)ViewData["pageNo"];
    var pageSize = (int)ViewData["pageSize"];
    var filter = (string)ViewData["Filter"];
    var showingRoles = (bool)ViewData["showingRoles"];
    var articlePermissions = (List<ArticlePermission>)ViewData["ArticlePermissions"];
    var articleNumber = (int)ViewData["ArticleNumber"];
    var allowedUsers = (List<IdentityUser>)ViewData["AllowedUsers"];
    var allowedRoles = (List<IdentityRole>)ViewData["AllowedRoles"];

    var pagerModel = new GridPagerPartialViewModel(pageNumber, rowCount, pageSize, sortOrder, currentSort, "/Editor/Permissions");

}
<style>
    .fa-shield {
        padding-right: 4px;
    }
</style>

<div class="pt-3 text-light">
    <div class="container">
        <div class="row">
            <div class="col-6">
                <h2>Page Permissions Editor</h2>
                @if (showingRoles)
                {
                    <h5>Now editing <span class="badge bg-secondary">user group</span> permissions for:</h5>
                }
                else
                {
                    <h5>Now editing <span class="badge bg-secondary">individual user</span> permissions for:</h5>
                }
                <h1 class=" mb-3">@ViewData["Title"]</h1>
                @if (showingRoles)
                {
                    <a title="Switch to individual users." href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=false" class="btn btn-sm btn-secondary" style="min-width:100px;">Switch to individual users <i class="fa-solid fa-circle-arrow-right"></i></a>
                }
                else
                {
                    <a title="Switch to user groups." href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=true" class="btn btn-sm btn-secondary" style="min-width:100px;">Switch to user groups <i class="fa-solid fa-circle-arrow-right"></i></a>
                }
                <div asp-validation-summary="All" class="text-danger"></div>
            </div>
        </div>
        <div class="row">
            <div class="col mb-3">
                <button id="btnSavePermissions" class="btn btn-sm btn-primary" title="Save permissions.">Save</button>
                <button id="btnSavePermissionAndClose" class="btn btn-sm btn-primary" style="display:none;" title="Save permissions.">Save and Close</button>
                <button id="btnClearPermissions" class="btn btn-sm btn-secondary" title="Clear all access settings.">Clear</button>
                <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Index")">Page list <i class="fa-solid fa-circle-arrow-right"></i></a>
                <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Versions", "Editor", new { Id = articleNumber })">Version list <i class="fa-solid fa-circle-arrow-right"></i></a>
            </div>
        </div>
        <div class="row">
            <div class="col mb-3">
                <p>Restrict access to certain users and roles by selecting them below.</p>
                @if (articlePermissions.Count == 0)
                {
                    <div class="alert alert-secondary d-flex" role="alert">
                        <i class="fa-solid fa-triangle-exclamation mt-1 me-3"></i>
                        <b>No one yet has access to this page.</b>
                    </div>
                }
                else
                {
                    var msg = "Current access is limited to these";
                    if (allowedUsers.Count > 0)
                    {
                        msg += " users: " + string.Join(" ", allowedUsers.Select(s => "<span class='badge rounded-pill bg-secondary'>" + s.Email + "</span>"));
                        if (allowedRoles.Count > 0)
                        {
                            msg += " and roles: " + string.Join(" ", allowedRoles.Select(s => "<span class='badge rounded-pill bg-secondary'>" + s.Name + "</span>"));
                        }
                        else
                        {
                            msg += ".";
                        }
                    }
                    else
                    {
                        msg += " roles: " + string.Join(" ", allowedRoles.Select(s => s.Name)) + ".";
                    }
                    <div class="accordion" id="permAccordian">
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button title="Click to show current permissions." class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                                    Current Permissions
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse" data-bs-parent="#permAccordian">
                                <div class="accordion-body">
                                    @Html.Raw(msg)
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="row cpws-table-pager-row-top">
                <div class="col-4">
                </div>
                <div class="col-4 justify-content-center">
                    <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
                </div>
                <div class="col-4 d-flex justify-content-end">
                </div>
            </div>
            <div class="row">
                <div class="col bg-dark">
                    <div class="table-responsive custom-table-responsive">
                        <table class="table custom-table">
                            <thead>
                                <tr>
                                    <th scope="col">
                                        Select
                                    </th>
                                    <th scope="col">
                                        @(showingRoles ? "User Group Name" : "User Email Address")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in Model)
                                {
                                    <tr scope="row" class="row-click-ckbox">
                                        <td scope="row" style="min-width:80px;">
                                            <div class="form-check">
                                                <input class="form-check-input gridCheckBox" data-ccms-idenid='@row.IdentityObjectId' type="checkbox">
                                                <label class="form-check-label">
                                                    Select
                                                </label>
                                            </div>
                                        </td>
                                        <td>
                                            <b>@row.Name</b>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row cpws-table-pager-row-bottom">
                <div class="col-4">
                </div>
                <div class="col-4 justify-content-center">
                    <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
                </div>
                <div class="col-4">
                </div>
            </div>
        </div>
    </div>
</div>
<form id="frmUserIds" asp-action="Index" asp-controller="Roles" method="post">
    @Html.AntiForgeryToken()
    <input id="identityObjectIds" name="identityObjectIds" type="hidden" />
</form>
<div class="modal" id="modalSaving" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Saving...</h5>
            </div>
            <div class="modal-body">
                <p>Permissions are being saved...</p>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<script>

    let identityObjectIds = [];

    const modalSaving = new bootstrap.Modal(document.getElementById('modalSaving'));

    $(document).ready(function () {

        // ccmsNavMenu
        $("body").addClass("cwps-body");
        $("body").addClass("cwps-editor-container");

        // Clear and reload permissions
        clearIdentityObjectIds();
        reloadIdentityObjectIds();

        $(".row-click-ckbox").click(function (e) {
            if (e.target.type != 'checkbox' && e.target.tagName != 'A') {
                var cb = $(this).find("input[type=checkbox]");
                cb.trigger('click');
            }
        });

        $(".gridCheckBox").each(function (index, element) {

            if ((identityObjectIds.indexOf(getIdentityObjectIds(element)) > -1)) {
                $(element).prop('checked', true);
                cwpsSelectTableRow(element, true);
            }

            $(element).on("change", function () {

                let userId = getIdentityObjectIds(element);

                let isChecked = $(element).prop('checked');

                if (isChecked) {
                    saveIdentityObjectId(userId);
                } else {
                    removeIdentityObjectId(userId);
                }

                cwpsSelectTableRow(element, isChecked);

                resetButtons();

            });
        });

        $("#btnSavePermissions").click(function (e) {
            e.preventDefault();
            savePermissions();
        });

        $("#btnClearPermissions").click(function (e) {
            e.preventDefault();
            clearIdentityObjectIds();

            $(".gridCheckBox").each(function (index, element) {
                $(element).prop('checked', false);
                cwpsSelectTableRow(element, false);
            });

        });
    });

    function savePermissions() {

        modalSaving.show();

        var model = {
            Id: @articleNumber,
            IdentityObjectIds: identityObjectIds
        }

        $.post("@Url.Action("Permissions", "Editor")", model, function (data) {
            // clearIdentityObjectIds();
            //window.location.href = "@Url.Action("Permissions", "Editor", new { Id = articleNumber})";

            // If applicable, let the parent know what happened.
            try {
                if (typeof (parent.hasPermissionsSet) !== "undefined") {
                    if (identityObjectIds == null || identityObjectIds.length < 1) {
                        parent.hasPermissionsSet = false;
                    } else {
                        parent.hasPermissionsSet = true;
                    }
                    parent.checkForSetPermissions();
                }
            } catch { }
            modalSaving.hide();
        }).fail(function (data) { modalSaving.hide(); alert(data); });

    }

    function saveIdentityObjectId(userId) {
        // Avoid duplications
        if (identityObjectIds.indexOf(userId) == -1) {
            identityObjectIds.push(userId);
        }
        sessionStorage.setItem("identityObjectIds", JSON.stringify(identityObjectIds));
    }

    function removeIdentityObjectId(userId) {
        var tmp = identityObjectIds.filter(function (value) {
            return value !== userId
        });
        identityObjectIds = tmp;
        sessionStorage.setItem("identityObjectIds", JSON.stringify(identityObjectIds));
    }

    function reloadIdentityObjectIds() {
        let data = sessionStorage.getItem("identityObjectIds");
        if (typeof (data) === "undefined" || data === null || data === "") {
            identityObjectIds = [@(Html.Raw(string.Join(",", articlePermissions.Select(s => "'" + s.IdentityObjectId + "'").ToArray())))]
        } else {
            identityObjectIds = JSON.parse(data);
        }
    }

    function clearIdentityObjectIds() {
        identityObjectIds = [];
        sessionStorage.removeItem("identityObjectIds");
        sessionStorage.setItem("identityObjectIds", JSON.stringify(identityObjectIds));
    }

    function getIdentityObjectIds(checkbox) {
        return $(checkbox).attr("data-ccms-idenid");
    }

    function resetButtons() {

        // Get the array length
        let arrayLength = identityObjectIds.length;

        if (arrayLength > 0) {
            $("#btnClearUsers").show();
            $("#btnDeleteUsers").show();
            $("#btnAddRemoveRoles").hide();
        } else {
            $("#btnClearUsers").hide();
            $("#btnDeleteUsers").hide();
            $("#btnAddRemoveRoles").hide();
        }

    }

</script>
