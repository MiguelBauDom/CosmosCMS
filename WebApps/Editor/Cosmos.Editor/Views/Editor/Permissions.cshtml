@using Cosmos.Editor.Models;
@using Microsoft.AspNetCore.Identity;
@model List<ArticlePermisionItem>
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _userManager

@{

    var rowCount = (int)ViewData["RowCount"];
    var sortOrder = (string)ViewData["sortOrder"];
    var currentSort = (string)ViewData["currentSort"];
    var pageNumber = (int)ViewData["pageNo"];
    var pageSize = (int)ViewData["pageSize"];
    var filter = (string)ViewData["Filter"];
    var showingRoles = (bool)ViewData["showingRoles"];
    var articlePermissions = (List<ArticlePermission>)ViewData["ArticlePermissions"];
    var articleNumber = (int)ViewData["ArticleNumber"];

    var allowedUsers = (List<IdentityUser>)ViewData["AllowedUsers"];
    var allowedRoles = (List<IdentityRole>)ViewData["AllowedRoles"];
    var ids = showingRoles ? allowedRoles.Select(s => s.Id).ToArray() : allowedUsers.Select(s => s.Id).ToArray();

    var pagerModel = new GridPagerPartialViewModel(pageNumber, rowCount, pageSize, sortOrder, currentSort, "/Editor/Permissions");

}
<style>
    .fa-shield {
        padding-right: 4px;
    }
</style>

<div class="pt-3 text-light">
    <div class="container">
        <div class="row">
            <div class="col-6">
                @if (showingRoles)
                {
                    <h5>Selecting which <span class="badge bg-secondary">user group</span> can access:</h5>
                }
                else
                {
                    <h5>Selecting which <span class="badge bg-secondary">users</span> can access:</h5>
                }
                <h2 class=" mb-3">&quot;@ViewData["Title"]&quot;</h2>
                <a title="Click to switch to individual users." class="btn btn-sm btn-secondary" href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=false">
                    Users selected: <span id="userCount" class="badge bg-light text-dark">0</span>
                </a>
                <a title="Click to switch to user groups." class="btn btn-sm btn-secondary" href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=true">
                    Groups selected: <span id="groupCount" class="badge bg-light text-dark">0</span>
                </a>
                @if (showingRoles)
                {
                    <a title="Switch to individual users." href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=false" class="btn btn-sm btn-primary" style="min-width:100px;">Switch to users <i class="fa-solid fa-circle-arrow-right"></i></a>
                }
                else
                {
                    <a title="Switch to user groups." href="@Url.Action("Permissions", "Editor", new { Id = articleNumber })?forRoles=true" class="btn btn-sm btn-primary" style="min-width:100px;">Switch to groups <i class="fa-solid fa-circle-arrow-right"></i></a>
                }
                <div asp-validation-summary="All" class="text-danger"></div>
            </div>
        </div>
        <div class="row">
            <div class="col-6 mb-3">
                <button id="btnSavePermissions" class="btn btn-sm btn-primary" title="Save permissions.">Save</button>
                <button id="btnSavePermissionAndClose" class="btn btn-sm btn-primary" style="display:none;" title="Save permissions.">Save and Close</button>
                <button id="btnClearPermissions" class="btn btn-sm btn-secondary" title="Clear all access settings.">Clear</button>
                <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Index")">Page list <i class="fa-solid fa-circle-arrow-right"></i></a>
                <a title="Return to page list" class="btn btn-sm btn-secondary" href="@Url.Action("Versions", "Editor", new { Id = articleNumber })">Version list <i class="fa-solid fa-circle-arrow-right"></i></a>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="row cpws-table-pager-row-top">
                    <div class="col-4">
                    </div>
                    <div class="col-4 justify-content-center">
                        <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
                    </div>
                    <div class="col-4 d-flex justify-content-end">
                    </div>
                </div>
                <div class="row">
                    <div class="col bg-dark">
                        <div class="table-responsive custom-table-responsive">
                            <table class="table custom-table">
                                <thead>
                                    <tr>
                                        <th scope="col">
                                            Select
                                        </th>
                                        <th scope="col">
                                            @(showingRoles ? "User Group Name" : "User Email Address")
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var row in Model)
                                    {
                                        <tr scope="row" class="row-click-ckbox">
                                            <td scope="row" style="min-width:80px;">
                                                <div class="form-check">
                                                    <input class="form-check-input gridCheckBox" data-ccms-idenid='@row.IdentityObjectId' type="checkbox">
                                                    <label class="form-check-label">
                                                        Select
                                                    </label>
                                                </div>
                                            </td>
                                            <td>
                                                <b>@row.Name</b>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="row cpws-table-pager-row-bottom">
                    <div class="col-4">
                    </div>
                    <div class="col-4 justify-content-center">
                        <partial name="~/Views/Shared/GridPager/_GridPager.cshtml" model="pagerModel"></partial>
                    </div>
                    <div class="col-4">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<form id="frmUserIds" asp-action="Index" asp-controller="Roles" method="post">
    @Html.AntiForgeryToken()
    <input id="identityObjectIds" name="identityObjectIds" type="hidden" />
</form>
<div class="modal" id="modalSaving" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Saving...</h5>
            </div>
            <div class="modal-body">
                <p>Permissions are being saved...</p>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<script>

    let selectedUserIds = [];
    let selectedRoleIds = [];
    const showingRoles = @showingRoles.ToString().ToLower();

    const modalSaving = new bootstrap.Modal(document.getElementById('modalSaving'));

    $(document).ready(function () {

        // ccmsNavMenu
        $("body").addClass("cwps-body");
        $("body").addClass("cwps-editor-container");

        $(".row-click-ckbox").click(function (e) {
            if (e.target.type != 'checkbox' && e.target.tagName != 'A') {
                var cb = $(this).find("input[type=checkbox]");
                cb.trigger('click');
            }
        });

        // Reload IDs from session storage if present, or from the server.
        const ids = retrieveSelectedIds();

        $(".gridCheckBox").each(function (index, element) {


            if ((ids.indexOf(getIdFromChkBox(element)) > -1)) {
                $(element).prop('checked', true);
                cwpsSelectTableRow(element, true);
            }

            $(element).on("change", function () {

                let id = getIdFromChkBox(element); id

                let isChecked = $(element).prop('checked');

                if (isChecked) {
                    saveIdentityObjectId(id);
                } else {
                    removeIdentityObjectId(id);
                }

                cwpsSelectTableRow(element, isChecked);

                resetButtons();

            });
        });

        $("#btnSavePermissions").click(function (e) {
            e.preventDefault();
            savePermissions();
        });

        $("#btnClearPermissions").click(function (e) {
            e.preventDefault();
            clearIdentityObjectIds();

            $(".gridCheckBox").each(function (index, element) {
                $(element).prop('checked', false);
                cwpsSelectTableRow(element, false);
            });

        });

        refreshCounts();
    });

    function savePermissions() {

        modalSaving.show();
        const identityObjectIds = selectedUserIds.concat(selectedRoleIds);
        var model = {
            Id: @articleNumber,
            IdentityObjectIds: identityObjectIds
        }

        $.post("@Url.Action("Permissions", "Editor")", model, function (data) {
            clearIdentityObjectIds();
            window.location.href = "@Url.Action("Permissions", "Editor", new { Id = articleNumber})";

            // If applicable, let the parent know what happened.
            try {
                if (typeof (parent.hasPermissionsSet) !== "undefined") {
                    if (identityObjectIds == null || identityObjectIds.length < 1) {
                        parent.hasPermissionsSet = false;
                    } else {
                        parent.hasPermissionsSet = true;
                    }
                    parent.checkForSetPermissions();
                }
            } catch { }
            modalSaving.hide();
        }).fail(function (data) { modalSaving.hide(); alert(data); });

    }

    function saveIdentityObjectId(userId) {
        // Avoid duplications
        if (showingRoles) {
            if (selectedRoleIds.indexOf(userId) == -1) {
                selectedRoleIds.push(userId);
            }
            sessionStorage.setItem("selectedRoleIds", JSON.stringify(selectedRoleIds));
        } else {
            if (selectedUserIds.indexOf(userId) == -1) {
                selectedUserIds.push(userId);
            }
            sessionStorage.setItem("selectedUserIds", JSON.stringify(selectedUserIds));
        }
        refreshCounts();
    }

    function removeIdentityObjectId(id) {
        if (showingRoles) {
            var tmp = selectedRoleIds.filter(function (value) {
                return value !== id
            });
            selectedRoleIds = tmp;
            sessionStorage.setItem("selectedRoleIds", JSON.stringify(selectedRoleIds));
        } else {
            var tmp = selectedUserIds.filter(function (value) {
                return value !== id
            });
            selectedUserIds = tmp;
            sessionStorage.setItem("selectedUserIds", JSON.stringify(selectedUserIds));
        }
        refreshCounts();
    }

    function retrieveSelectedIds() {
        reloadIdentityObjectIds();
        if (showingRoles) {
            return selectedRoleIds;
        } else {
            return selectedUserIds;
        }
    }

    function refreshCounts() {
        $("#groupCount").html(selectedRoleIds.length);
        $("#userCount").html(selectedUserIds.length);
    }

    /**
     * Reloads the variables selectedRoleIds and selectedUserIds
     * from web browser sessionStorage. If storage is empty, reloads what is selected
     * server-side.
     */
    function reloadIdentityObjectIds() {

        const roles = sessionStorage.getItem("selectedRoleIds");
        // Reload roles
        if (typeof (roles) === "undefined" || roles === null || roles === "") {
            selectedRoleIds = [@(Html.Raw(string.Join(",", articlePermissions.Where(w => w.IsRoleObject == true).Select(s => "'" + s.IdentityObjectId + "'").ToArray())))]
        } else {
            selectedRoleIds = JSON.parse(roles);
        }

        // Ensure this is an array if no data.
        if (typeof (selectedRoleIds) === "undefined" || selectedRoleIds === null || selectedRoleIds === "") {
            selectedRoleIds = [];
        }

        // Reload users
        const users = sessionStorage.getItem("selectedUserIds");
        if (typeof (users) === "undefined" && users === null && users === "") {
            selectedRoleIds = [@(Html.Raw(string.Join(",", articlePermissions.Where(w => w.IsRoleObject == false).Select(s => "'" + s.IdentityObjectId + "'").ToArray())))]
        } else {
            selectedUserIds = JSON.parse(users);
        }

        // Ensure this is an array if no data.
        if (typeof (selectedUserIds) === "undefined" || selectedUserIds === null || selectedUserIds === "") {
            selectedUserIds = [];
        }
    }

    function clearIdentityObjectIds() {
        selectedUserIds = [];
        selectedRoleIds = [];
        sessionStorage.removeItem("selectedUserIds");
        sessionStorage.removeItem("selectedRoleIds");
        refreshCounts();
    }

    function getIdFromChkBox(checkbox) {
        return $(checkbox).attr("data-ccms-idenid");
    }

    function resetButtons() {
        // Get the array length
        let arrayLength = selectedUserIds.length + selectedRoleIds.length;
        if (arrayLength > 0) {
            $("#btnClearUsers").show();
            $("#btnDeleteUsers").show();
            $("#btnAddRemoveRoles").hide();
        } else {
            $("#btnClearUsers").hide();
            $("#btnDeleteUsers").hide();
            $("#btnAddRemoveRoles").hide();
        }
        refreshCounts();
    }

</script>
